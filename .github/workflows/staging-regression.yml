name: Staging Regression Tests

on:
  workflow_dispatch: # Manual trigger only
    inputs:
      environment:
        description: 'Environment to test against'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_ENV: test
  CI: true

jobs:
  regression-tests:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Set environment variables
        run: |
          if [ "${{ github.event.inputs.environment }}" == "staging" ]; then
            echo "APP_ENV=staging" >> $GITHUB_ENV
            echo "APP_URL=${{ vars.STAGING_APP_URL || 'https://staging.verifast.app' }}" >> $GITHUB_ENV
            echo "API_URL=${{ vars.STAGING_API_URL || 'https://api-staging.verifast.app' }}" >> $GITHUB_ENV
          elif [ "${{ github.event.inputs.environment }}" == "production" ]; then
            echo "APP_ENV=production" >> $GITHUB_ENV
            echo "APP_URL=${{ vars.PROD_APP_URL || 'https://verifast.app' }}" >> $GITHUB_ENV
            echo "API_URL=${{ vars.PROD_API_URL || 'https://api.verifast.app' }}" >> $GITHUB_ENV
          fi

      - name: Run regression tests
        run: |
          echo "üß™ Starting regression tests..."
          echo "üìä Running only: Frontend Heartbeat test"
          echo "üåê Environment: $APP_ENV"
          echo "üîó Base URL: $APP_URL"
          echo ""
          npx playwright test --project=chromium --grep "C40 - Frontend Heartbeat"
        env:
          APP_ENV: ${{ env.APP_ENV }}
          APP_URL: ${{ env.APP_URL }}
          API_URL: ${{ env.API_URL }}
          TESTRAIL_HOST: ${{ secrets.TESTRAIL_HOST }}
          TESTRAIL_PROJECT_ID: ${{ secrets.TESTRAIL_PROJECT_ID }}
          TESTRAIL_SUITE_ID: ${{ secrets.TESTRAIL_SUITE_ID }}
          TESTRAIL_USER: ${{ secrets.TESTRAIL_USER }}
          TESTRAIL_API_KEY: ${{ secrets.TESTRAIL_API_KEY }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ env.APP_ENV }}
          path: |
            playwright-report/
            test-results/
          retention-days: 30

      - name: Create TestRail test run
        if: always()
        run: |
          # Generate TestRail test run title with current date
          TEST_RUN_TITLE="Automated regression in: ${{ env.APP_ENV }} - Browser: chromium - Date $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          
          # Create TestRail test run and upload results
          trcli -y \
            -h $TESTRAIL_HOST \
            --project "$TESTRAIL_PROJECT_ID" \
            --username $TESTRAIL_USER \
            --key $TESTRAIL_API_KEY \
            parse_junit \
            --title "$TEST_RUN_TITLE" \
            --suite-id $TESTRAIL_SUITE_ID \
            --case-matcher "name" \
            --case-fields "custom_environment:${{ env.APP_ENV }}" \
            --result-fields "custom_browser:chromium" \
            --file playwright-report/results.xml
        env:
          TESTRAIL_HOST: ${{ secrets.TESTRAIL_HOST }}
          TESTRAIL_PROJECT_ID: ${{ secrets.TESTRAIL_PROJECT_ID }}
          TESTRAIL_SUITE_ID: ${{ secrets.TESTRAIL_SUITE_ID }}
          TESTRAIL_USER: ${{ secrets.TESTRAIL_USER }}
          TESTRAIL_API_KEY: ${{ secrets.TESTRAIL_API_KEY }}

      - name: Send Slack notification
        if: always()
        run: |
          # Get test results summary
          if [ -f "playwright-report/results.xml" ]; then
            TOTAL_TESTS=$(grep -c '<testcase' playwright-report/results.xml || echo "0")
            FAILED_TESTS=$(grep -c '<failure' playwright-report/results.xml || echo "0")
            PASSED_TESTS=$((TOTAL_TESTS - FAILED_TESTS))
            SKIPPED_TESTS=$(grep -c '<skipped' playwright-report/results.xml || echo "0")
          else
            TOTAL_TESTS=0
            FAILED_TESTS=0
            PASSED_TESTS=0
            SKIPPED_TESTS=0
          fi
          
          # Calculate duration (approximate)
          DURATION="< 1s"
          if [ "$TOTAL_TESTS" -gt 0 ]; then
            DURATION="~${TOTAL_TESTS}s"
          fi
          
          # Determine status and color
          if [ "${{ job.status }}" == "success" ] && [ "$FAILED_TESTS" -eq 0 ]; then
            STATUS="‚úÖ PASSED"
            COLOR="#36a64f"
            STATUS_EMOJI="‚úÖ"
          else
            STATUS="‚ùå FAILED"
            COLOR="#ff0000"
            STATUS_EMOJI="‚ùå"
          fi
          
          # Create visual test result dots
          VISUAL_DOTS=""
          for i in $(seq 1 $PASSED_TESTS); do
            VISUAL_DOTS="${VISUAL_DOTS}üü¢"
          done
          for i in $(seq 1 $FAILED_TESTS); do
            VISUAL_DOTS="${VISUAL_DOTS}üî¥"
          done
          for i in $(seq 1 $SKIPPED_TESTS); do
            VISUAL_DOTS="${VISUAL_DOTS}üü°"
          done
          
          # Get failed test names if any
          FAILED_TEST_NAMES=""
          if [ "$FAILED_TESTS" -gt 0 ] && [ -f "playwright-report/results.xml" ]; then
            FAILED_TEST_NAMES=$(grep -A 1 '<failure' playwright-report/results.xml | grep 'name=' | sed 's/.*name="\([^"]*\)".*/- \1/' | head -5)
          fi
          
          # Create Slack message
          MESSAGE="{
            \"blocks\": [
              {
                \"type\": \"header\",
                \"text\": {
                  \"type\": \"plain_text\",
                  \"text\": \"Staging Regression Tests - ${{ env.APP_ENV }}\"
                }
              },
              {
                \"type\": \"section\",
                \"fields\": [
                  {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*üìä Total Tests:* $TOTAL_TESTS\"
                  },
                  {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*‚úÖ Passed:* $PASSED_TESTS\"
                  },
                  {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*‚ùå Failed:* $FAILED_TESTS\"
                  },
                  {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*‚è≠Ô∏è Skipped:* $SKIPPED_TESTS\"
                  },
                  {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*‚è±Ô∏è Duration:* $DURATION\"
                  },
                  {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*üåê Environment:* ${{ env.APP_ENV }}\"
                  }
                ]
              },
              {
                \"type\": \"section\",
                \"text\": {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Visual Test Results:*\n$VISUAL_DOTS\"
                }
              },
              {
                \"type\": \"section\",
                \"text\": {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*$STATUS_EMOJI Status:* $STATUS | Duration: $DURATION\"
                }
              },
              {
                \"type\": \"section\",
                \"text\": {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*üîó Run ID:* ${{ github.run_id }}\"
                }
              }"
          
          # Add failed tests section if there are failures
          if [ "$FAILED_TESTS" -gt 0 ] && [ -n "$FAILED_TEST_NAMES" ]; then
            MESSAGE="$MESSAGE,
              {
                \"type\": \"section\",
                \"text\": {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*‚ùå Failed Tests ($FAILED_TESTS):*\n$FAILED_TEST_NAMES\"
                }
              }"
          fi
          
          # Add links section
          MESSAGE="$MESSAGE,
              {
                \"type\": \"section\",
                \"text\": {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*üîó Related Links:*\n‚Ä¢ <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|GitHub Actions Run>\n‚Ä¢ <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts|Test Report for: regression tests in chromium>\"
                }
              },
              {
                \"type\": \"section\",
                \"text\": {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*üë§ Triggered by:* ${{ github.actor }}\"
                }
              },
              {
                \"type\": \"context\",
                \"elements\": [
                  {
                    \"type\": \"mrkdwn\",
                    \"text\": \"üìù Tests do not block deployment\"
                  }
                ]
              }
            ],
            \"attachments\": [
              {
                \"color\": \"$COLOR\"
              }
            ]
          }"
          
          # Send to Slack
          curl -X POST -H 'Content-type: application/json' \
            --data "$MESSAGE" \
            $SLACK_WEBHOOK_URL
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
