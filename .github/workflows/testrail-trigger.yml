name: TestRail Triggered Tests

on:
  repository_dispatch:
    types: [testrail-run-request]

jobs:
  testrail-triggered-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Parse TestRail request
        id: parse-request
        run: |
          echo "üîç Parsing TestRail webhook request..."
          echo "Run ID: ${{ github.event.client_payload.run_id }}"
          echo "Selected Cases: ${{ github.event.client_payload.case_ids }}"
          echo "Environment: ${{ github.event.client_payload.environment }}"
          echo "TestRail User: ${{ github.event.client_payload.testrail_user }}"
          
          # Set environment variables for the workflow
          echo "TESTRAIL_RUN_ID=${{ github.event.client_payload.run_id }}" >> $GITHUB_ENV
          echo "SELECTED_CASE_IDS=${{ github.event.client_payload.case_ids }}" >> $GITHUB_ENV
          echo "REQUESTED_ENVIRONMENT=${{ github.event.client_payload.environment }}" >> $GITHUB_ENV
          echo "TESTRAIL_USER=${{ github.event.client_payload.testrail_user }}" >> $GITHUB_ENV
          
          # Parse environment from multiple possible sources
          ENVIRONMENT="${{ github.event.client_payload.environment }}"
          
          # If environment is not set, try to extract from description or references
          if [ -z "$ENVIRONMENT" ] || [ "$ENVIRONMENT" = "null" ]; then
            echo "üîç Environment not found in payload, checking alternative sources..."
            
            # Check if environment is in description (format: ENVIRONMENT: develop)
            if echo "${{ github.event.client_payload.description }}" | grep -q "ENVIRONMENT:"; then
              ENVIRONMENT=$(echo "${{ github.event.client_payload.description }}" | grep -o "ENVIRONMENT: [a-zA-Z]*" | cut -d' ' -f2)
              echo "‚úÖ Found environment in description: $ENVIRONMENT"
            fi
            
            # Check if environment is in references (format: env:develop)
            if [ -z "$ENVIRONMENT" ] && echo "${{ github.event.client_payload.references }}" | grep -q "env:"; then
              ENVIRONMENT=$(echo "${{ github.event.client_payload.references }}" | grep -o "env:[a-zA-Z]*" | cut -d':' -f2)
              echo "‚úÖ Found environment in references: $ENVIRONMENT"
            fi
            
            # Default to develop if still not found
            if [ -z "$ENVIRONMENT" ]; then
              ENVIRONMENT="develop"
              echo "‚ö†Ô∏è Environment not found, defaulting to: $ENVIRONMENT"
            fi
          fi
          
          echo "REQUESTED_ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
          
          # Set environment-specific variables
          if [ "$ENVIRONMENT" = "develop" ]; then
            echo "APP_ENV=development" >> $GITHUB_ENV
            echo "APP_URL=${{ vars.APP_URL }}" >> $GITHUB_ENV
            echo "API_URL=${{ vars.API_URL }}" >> $GITHUB_ENV
          elif [ "$ENVIRONMENT" = "staging" ]; then
            echo "APP_ENV=staging" >> $GITHUB_ENV
            echo "APP_URL=${{ vars.STAGING_APP_URL }}" >> $GITHUB_ENV
            echo "API_URL=${{ vars.STAGING_API_URL }}" >> $GITHUB_ENV
          else
            echo "‚ùå Unsupported environment: $ENVIRONMENT"
            exit 1
          fi

      - name: Generate test filter
        id: generate-filter
        run: |
          echo "üéØ Generating test filter for selected cases..."
          
          # Parse case IDs from the webhook payload
          CASE_IDS="${{ github.event.client_payload.case_ids }}"
          if [ -n "$CASE_IDS" ]; then
            echo "üìã Selected case IDs: $CASE_IDS"
            
            # Generate test filter using the test case mapper
            TEST_FILTER=$(node scripts/test-case-mapper.js filter "$CASE_IDS")
            echo "TEST_FILTER=$TEST_FILTER" >> $GITHUB_ENV
          else
            echo "‚ö†Ô∏è No case IDs provided, running all tests"
            echo "TEST_FILTER=--grep-invert '@document-upload'" >> $GITHUB_ENV
          fi
          
          echo "‚úÖ Test filter generated: $TEST_FILTER"
        env:
          TESTRAIL_HOST: ${{ secrets.TESTRAIL_HOST }}
          TESTRAIL_USER: ${{ secrets.TESTRAIL_USER }}
          TESTRAIL_API_KEY: ${{ secrets.TESTRAIL_API_KEY }}
          TESTRAIL_PROJECT_ID: ${{ secrets.TESTRAIL_PROJECT_ID }}
          TESTRAIL_SUITE_ID: ${{ secrets.TESTRAIL_SUITE_ID }}

      - name: Run selected tests
        run: |
          echo "üß™ Running tests triggered by TestRail..."
          echo "üåê Environment: $APP_ENV"
          echo "üîó Base URL: $APP_URL"
          echo "üéØ Filter: $TEST_FILTER"
          echo ""
          
          npx playwright test --project=chromium $TEST_FILTER
          
          echo "‚úÖ Tests completed"

      - name: Create TestRail test run
        if: always()
        run: |
          echo "üìä Creating TestRail test run..."
          
          # Generate TestRail test run title
          TEST_RUN_TITLE="TestRail Triggered Run - $REQUESTED_ENVIRONMENT - Browser: chromium - Date $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          
          # Create TestRail test run and upload results
          TESTRAIL_OUTPUT=$(trcli -y \
            -h $TESTRAIL_HOST \
            --project "$TESTRAIL_PROJECT_NAME" \
            --username $TESTRAIL_USER \
            --key $TESTRAIL_API_KEY \
            parse_junit \
            --title "$TEST_RUN_TITLE" \
            --suite-id $TESTRAIL_SUITE_ID \
            --case-matcher "name" \
            --case-fields "custom_environment:$REQUESTED_ENVIRONMENT" \
            --result-fields "custom_browser:chromium" \
            --file playwright-report/results.xml 2>&1)
          
          echo "TestRail Output: $TESTRAIL_OUTPUT"
          
          # Extract TestRail run ID from output
          TESTRAIL_RUN_ID=$(echo "$TESTRAIL_OUTPUT" | grep -o "Test run: .*/runs/view/[0-9]*" | head -1 | sed 's/.*\/runs\/view\///')
          if [ -n "$TESTRAIL_RUN_ID" ]; then
            echo "TESTRAIL_RUN_ID=$TESTRAIL_RUN_ID" >> $GITHUB_ENV
            echo "‚úÖ TestRail run created with ID: $TESTRAIL_RUN_ID"
          else
            echo "‚ùå Could not extract TestRail run ID"
            echo "TESTRAIL_RUN_ID=" >> $GITHUB_ENV
          fi
        env:
          TESTRAIL_HOST: ${{ secrets.TESTRAIL_HOST }}
          TESTRAIL_PROJECT_NAME: ${{ secrets.TESTRAIL_PROJECT_NAME }}
          TESTRAIL_SUITE_ID: ${{ secrets.TESTRAIL_SUITE_ID }}
          TESTRAIL_USER: ${{ secrets.TESTRAIL_USER }}
          TESTRAIL_API_KEY: ${{ secrets.TESTRAIL_API_KEY }}

      - name: Analyze flaky tests
        if: always()
        run: |
          echo "üîç Analyzing test results for flakiness..."
          node scripts/flaky_analysis/flaky-test-analyzer.js "playwright-report/results.xml" "flaky-analysis.json" "20" "2"
          echo "üìä Flaky analysis completed"
          
          # Tag flaky tests if any found
          if [ -f "flaky-analysis.json" ]; then
            echo "üè∑Ô∏è Checking for flaky tests to tag..."
            node scripts/flaky_analysis/flaky-test-tagger.js tag "flaky-analysis.json" "tests"
          fi
          
          echo "‚úÖ Flaky test analysis and tagging completed"

      - name: Process failed test videos
        if: always()
        run: |
          echo "üé• Processing failed test videos..."
          if [ -d "test-results" ]; then
            echo "Found test-results directory, processing videos..."
            node scripts/testrail-integration.js attach-videos "${{ env.TESTRAIL_RUN_ID }}"
          else
            echo "No test-results directory found, skipping video processing"
          fi
        env:
          TESTRAIL_HOST: ${{ secrets.TESTRAIL_HOST }}
          TESTRAIL_USER: ${{ secrets.TESTRAIL_USER }}
          TESTRAIL_API_KEY: ${{ secrets.TESTRAIL_API_KEY }}
          TESTRAIL_PROJECT_ID: ${{ secrets.TESTRAIL_PROJECT_ID }}
          TESTRAIL_SUITE_ID: ${{ secrets.TESTRAIL_SUITE_ID }}

      - name: Create public report
        if: always()
        run: |
          echo "üîó Creating public report..."
          if [ -n "${{ env.TESTRAIL_RUN_ID }}" ]; then
            PUBLIC_REPORT=$(node scripts/create-public-report.js "${{ env.TESTRAIL_RUN_ID }}" --save)
            echo "PUBLIC_REPORT_URL=$(echo "$PUBLIC_REPORT" | grep -o 'https://[^[:space:]]*')" >> $GITHUB_ENV
            echo "‚úÖ Public report created"
          else
            echo "‚ö†Ô∏è No TestRail run ID available, skipping public report creation"
          fi
        env:
          TESTRAIL_HOST: ${{ secrets.TESTRAIL_HOST }}
          TESTRAIL_USER: ${{ secrets.TESTRAIL_USER }}
          TESTRAIL_API_KEY: ${{ secrets.TESTRAIL_API_KEY }}
          TESTRAIL_PROJECT_ID: ${{ secrets.TESTRAIL_PROJECT_ID }}
          TESTRAIL_SUITE_ID: ${{ secrets.TESTRAIL_SUITE_ID }}

      - name: Send Slack notification
        if: always()
        run: |
          echo "üì§ Sending Slack notification..."
          node scripts/slack-notification.js "TestRail Triggered Tests" "$REQUESTED_ENVIRONMENT" "${{ github.run_id }}" "playwright-report/results.xml" "${{ env.TESTRAIL_RUN_ID }}" "${{ env.PUBLIC_REPORT_URL }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_ACTOR: ${{ github.actor }}
          TESTRAIL_HOST: ${{ secrets.TESTRAIL_HOST }}
          TESTRAIL_PROJECT_NAME: ${{ secrets.TESTRAIL_PROJECT_NAME }}

      - name: Update original TestRail run
        if: always()
        run: |
          echo "üîÑ Updating original TestRail run with results..."
          if [ -n "${{ env.TESTRAIL_RUN_ID }}" ] && [ -n "${{ env.TESTRAIL_RUN_ID }}" ]; then
            # Close the original run that triggered this workflow
            node scripts/testrail-integration.js close-run "${{ env.TESTRAIL_RUN_ID }}"
            echo "‚úÖ Original TestRail run updated"
          else
            echo "‚ö†Ô∏è No TestRail run IDs available, skipping update"
          fi
        env:
          TESTRAIL_HOST: ${{ secrets.TESTRAIL_HOST }}
          TESTRAIL_USER: ${{ secrets.TESTRAIL_USER }}
          TESTRAIL_API_KEY: ${{ secrets.TESTRAIL_API_KEY }}
          TESTRAIL_PROJECT_ID: ${{ secrets.TESTRAIL_PROJECT_ID }}
          TESTRAIL_SUITE_ID: ${{ secrets.TESTRAIL_SUITE_ID }}
