name: Daily Regression Tests - Develop

on:
  schedule:
    # Daily at 10:00 AM UTC
    - cron: '0 10 * * *'
  workflow_dispatch: # Allow manual trigger

env:
  APP_ENV: development
  NODE_ENV: test
  CI: true

jobs:
  regression-tests:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium



      - name: Run regression tests
        run: |
          echo "üß™ Starting full regression test suite..."
          echo "üìä Running all tests excluding document-upload (with 3 CI retries)"
          echo "üåê Environment: $APP_ENV"
          echo "üîó Base URL: $APP_URL"
          echo ""
          npx playwright test --project=chromium --grep-invert "@document-upload"
          
          echo "üìÅ Checking generated files:"
          ls -la playwright-report/ || echo "playwright-report/ directory not found"
          find . -name "*.xml" -type f || echo "No XML files found"
        env:
          APP_ENV: ${{ vars.APP_ENV || 'development' }}
          APP_URL: ${{ vars.APP_URL || 'https://dev.verifast.app' }}
          API_URL: ${{ vars.API_URL || 'https://api-dev.verifast.app' }}
          TESTRAIL_HOST: ${{ secrets.TESTRAIL_HOST }}
          TESTRAIL_PROJECT_ID: ${{ secrets.TESTRAIL_PROJECT_ID }}
          TESTRAIL_SUITE_ID: ${{ secrets.TESTRAIL_SUITE_ID }}
          TESTRAIL_USER: ${{ secrets.TESTRAIL_USER }}
          TESTRAIL_API_KEY: ${{ secrets.TESTRAIL_API_KEY }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-develop
          path: |
            playwright-report/
            test-results/
          retention-days: 30

      - name: Install trcli
        if: always()
        run: |
          echo "Installing trcli..."
          pip install trcli
          echo "‚úÖ trcli installation completed"
          which trcli || echo "‚ùå trcli not found in PATH"

      - name: Create TestRail test run
        if: always()
        run: |
          echo "üîß Debugging TestRail setup..."
          echo "Checking trcli installation:"
          which trcli || echo "‚ùå trcli not found"
          trcli --version || echo "‚ùå trcli version check failed"
          
          echo "Checking JUnit XML file:"
          ls -la playwright-report/ || echo "‚ùå playwright-report directory not found"
          ls -la playwright-report/results.xml || echo "‚ùå results.xml not found"
          
          # Generate TestRail test run title with current date
          TEST_RUN_TITLE="Full Regression Suite: development - Browser: chromium - Date $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "üìù Test run title: $TEST_RUN_TITLE"
          
          # Create TestRail test run and upload results
          echo "üöÄ Running trcli command..."
          TESTRAIL_OUTPUT=$(trcli -y \
            -h $TESTRAIL_HOST \
            --project "$TESTRAIL_PROJECT_NAME" \
            --username $TESTRAIL_USER \
            --key $TESTRAIL_API_KEY \
            parse_junit \
            --title "$TEST_RUN_TITLE" \
            --suite-id $TESTRAIL_SUITE_ID \
            --case-matcher "name" \
            --case-fields "custom_environment:development" \
            --result-fields "custom_browser:chromium" \
            --file playwright-report/results.xml 2>&1)
          
          echo "TestRail Output: $TESTRAIL_OUTPUT"
          
          # Extract TestRail run ID from output
          TESTRAIL_RUN_ID=$(echo "$TESTRAIL_OUTPUT" | grep -o "Test run: .*/runs/view/[0-9]*" | head -1 | sed 's/.*\/runs\/view\///')
          if [ -n "$TESTRAIL_RUN_ID" ]; then
            echo "TESTRAIL_RUN_ID=$TESTRAIL_RUN_ID" >> $GITHUB_ENV
            echo "‚úÖ TestRail run created with ID: $TESTRAIL_RUN_ID"
          else
            echo "‚ùå Could not extract TestRail run ID"
            echo "TESTRAIL_RUN_ID=" >> $GITHUB_ENV
          fi
        env:
          TESTRAIL_HOST: ${{ secrets.TESTRAIL_HOST }}
          TESTRAIL_PROJECT_NAME: ${{ secrets.TESTRAIL_PROJECT_NAME }}
          TESTRAIL_SUITE_ID: ${{ secrets.TESTRAIL_SUITE_ID }}
          TESTRAIL_USER: ${{ secrets.TESTRAIL_USER }}
          TESTRAIL_API_KEY: ${{ secrets.TESTRAIL_API_KEY }}

      - name: Generate TestRail report via TRCLI (optional)
        if: always()
        run: |
          if [ -n "${{ secrets.TESTRAIL_REPORT_ID }}" ]; then
            echo "üßæ Generating TestRail report via TRCLI (report_id=${{ secrets.TESTRAIL_REPORT_ID }})"
            mkdir -p testrail_reports
            set +e
            trcli -y \
              -h $TESTRAIL_HOST \
              --username $TESTRAIL_USER \
              --key $TESTRAIL_API_KEY \
              report run \
              --report-id ${{ secrets.TESTRAIL_REPORT_ID }} \
              --output testrail_reports 2>&1 | tee trcli_report.log
            echo "‚úÖ TRCLI report run attempted (non-blocking). Listing PDFs:"
            find testrail_reports -maxdepth 2 -type f -name "*.pdf" -print || true
            set -e
          else
            echo "‚ÑπÔ∏è TESTRAIL_REPORT_ID not set; skipping TRCLI report generation"
          fi
        env:
          TESTRAIL_HOST: ${{ secrets.TESTRAIL_HOST }}
          TESTRAIL_USER: ${{ secrets.TESTRAIL_USER }}
          TESTRAIL_API_KEY: ${{ secrets.TESTRAIL_API_KEY }}

      - name: Export TestRail report and prepare attachments
        if: always()
        run: |
          echo "üìä Exporting TestRail report and preparing attachments..."
          if [ -n "${{ env.TESTRAIL_RUN_ID }}" ]; then
            # Export TestRail report as PDF
            echo "üìÑ Exporting TestRail report as PDF..."
            node scripts/testrail-integration.js export-pdf "${{ env.TESTRAIL_RUN_ID }}"
            
            # Process failed test videos
            if [ -d "test-results" ]; then
              echo "üé• Processing failed test videos..."
              node scripts/testrail-integration.js attach-videos "${{ env.TESTRAIL_RUN_ID }}"
              
              # Prepare videos for Slack attachment
              echo "üìπ Preparing videos for Slack attachment..."
              node scripts/testrail-integration.js prepare-slack-videos "${{ env.TESTRAIL_RUN_ID }}"
            else
              echo "No test-results directory found, skipping video processing"
            fi
            
            echo "‚úÖ TestRail report export and video preparation completed"
          else
            echo "‚ö†Ô∏è No TestRail run ID available, skipping export"
          fi
        env:
          TESTRAIL_HOST: ${{ secrets.TESTRAIL_HOST }}
          TESTRAIL_USER: ${{ secrets.TESTRAIL_USER }}
          TESTRAIL_API_KEY: ${{ secrets.TESTRAIL_API_KEY }}
          TESTRAIL_PROJECT_ID: ${{ secrets.TESTRAIL_PROJECT_ID }}
          TESTRAIL_SUITE_ID: ${{ secrets.TESTRAIL_SUITE_ID }}


      - name: Analyze flaky tests
        if: always()
        run: |
          echo "üîç Analyzing test results for flakiness..."
          node scripts/flaky_analysis/flaky-test-analyzer.js "playwright-report/results.xml" "flaky-analysis.json" "20" "2"
          echo "üìä Flaky analysis completed"
          
          # Tag flaky tests if any found
          if [ -f "flaky-analysis.json" ]; then
            echo "üè∑Ô∏è Checking for flaky tests to tag..."
            node scripts/flaky_analysis/flaky-test-tagger.js tag "flaky-analysis.json" "tests"
          fi
          
          echo "‚úÖ Flaky test analysis and tagging completed"

      - name: Send Slack notification
        if: always()
        run: |
          echo "üì§ Sending Slack notification with attachments..."
          node scripts/slack-notification.js "Full Regression Suite" "develop" "${{ github.run_id }}" "playwright-report/results.xml" "${{ env.TESTRAIL_RUN_ID }}" "flaky-analysis.json"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_UPLOAD_CHANNEL: ${{ vars.SLACK_UPLOAD_CHANNEL || '' }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_ACTOR: ${{ github.actor }}
          TESTRAIL_HOST: ${{ secrets.TESTRAIL_HOST }}
          TESTRAIL_PROJECT_NAME: ${{ secrets.TESTRAIL_PROJECT_NAME }}
