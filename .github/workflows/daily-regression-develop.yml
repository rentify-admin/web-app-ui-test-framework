name: Daily Regression Tests - Develop

on:
  schedule:
    # Daily at 10:00 AM UTC
    - cron: '0 10 * * *'
  workflow_dispatch: # Allow manual trigger

env:
  APP_ENV: development
  NODE_ENV: test
  CI: true

jobs:
  regression-tests:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium



      - name: Run regression tests
        run: |
          echo "üß™ Starting regression tests..."
          echo "üìä Running all tests except document uploads"
          echo "üåê Environment: $APP_ENV"
          echo "üîó Base URL: $APP_URL"
          echo ""
          npx playwright test --project=chromium --grep-invert "@document-upload"
          
          echo "üìÅ Checking generated files:"
          ls -la playwright-report/ || echo "playwright-report/ directory not found"
          find . -name "*.xml" -type f || echo "No XML files found"
        env:
          APP_ENV: ${{ vars.APP_ENV || 'development' }}
          APP_URL: ${{ vars.APP_URL || 'https://dev.verifast.app' }}
          API_URL: ${{ vars.API_URL || 'https://api-dev.verifast.app' }}
          TESTRAIL_HOST: ${{ secrets.TESTRAIL_HOST }}
          TESTRAIL_PROJECT_ID: ${{ secrets.TESTRAIL_PROJECT_ID }}
          TESTRAIL_SUITE_ID: ${{ secrets.TESTRAIL_SUITE_ID }}
          TESTRAIL_USER: ${{ secrets.TESTRAIL_USER }}
          TESTRAIL_API_KEY: ${{ secrets.TESTRAIL_API_KEY }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-develop
          path: |
            playwright-report/
            test-results/
          retention-days: 30

      - name: Install trcli
        run: |
          echo "Installing trcli..."
          pip install trcli

      - name: Create TestRail test run
        if: always()
        run: |
          # Generate TestRail test run title with current date
          TEST_RUN_TITLE="Automated regression in: development - Browser: chromium - Date $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          
          # Create TestRail test run and upload results
          TESTRAIL_OUTPUT=$(trcli -y \
            -h $TESTRAIL_HOST \
            --project "$TESTRAIL_PROJECT_NAME" \
            --username $TESTRAIL_USER \
            --key $TESTRAIL_API_KEY \
            parse_junit \
            --title "$TEST_RUN_TITLE" \
            --suite-id $TESTRAIL_SUITE_ID \
            --case-matcher "name" \
            --case-fields "custom_environment:development" \
            --result-fields "custom_browser:chromium" \
            --file playwright-report/results.xml 2>&1)
          
          echo "TestRail Output: $TESTRAIL_OUTPUT"
          
          # Extract TestRail run ID from output
          TESTRAIL_RUN_ID=$(echo "$TESTRAIL_OUTPUT" | grep -o "Run ID: [0-9]*" | head -1 | awk '{print $3}')
          if [ -n "$TESTRAIL_RUN_ID" ]; then
            echo "TESTRAIL_RUN_ID=$TESTRAIL_RUN_ID" >> $GITHUB_ENV
            echo "‚úÖ TestRail run created with ID: $TESTRAIL_RUN_ID"
          else
            echo "‚ùå Could not extract TestRail run ID"
            echo "TESTRAIL_RUN_ID=" >> $GITHUB_ENV
          fi
        env:
          TESTRAIL_HOST: ${{ secrets.TESTRAIL_HOST }}
          TESTRAIL_PROJECT_NAME: ${{ secrets.TESTRAIL_PROJECT_NAME }}
          TESTRAIL_SUITE_ID: ${{ secrets.TESTRAIL_SUITE_ID }}
          TESTRAIL_USER: ${{ secrets.TESTRAIL_USER }}
          TESTRAIL_API_KEY: ${{ secrets.TESTRAIL_API_KEY }}

                - name: Process failed test videos
            if: always()
            run: |
              echo "üé• Processing failed test videos..."
              if [ -d "test-results" ]; then
                echo "Found test-results directory, processing videos..."
                node scripts/testrail-integration.js attach-videos "${{ env.TESTRAIL_RUN_ID }}"
              else
                echo "No test-results directory found, skipping video processing"
              fi
            env:
              TESTRAIL_HOST: ${{ secrets.TESTRAIL_HOST }}
              TESTRAIL_USER: ${{ secrets.TESTRAIL_USER }}
              TESTRAIL_API_KEY: ${{ secrets.TESTRAIL_API_KEY }}
              TESTRAIL_PROJECT_ID: ${{ secrets.TESTRAIL_PROJECT_ID }}
              TESTRAIL_SUITE_ID: ${{ secrets.TESTRAIL_SUITE_ID }}

          - name: Create public report
            if: always()
            run: |
              echo "üîó Creating public report..."
              if [ -n "${{ env.TESTRAIL_RUN_ID }}" ]; then
                PUBLIC_REPORT=$(node scripts/create-public-report.js "${{ env.TESTRAIL_RUN_ID }}" --save)
                echo "PUBLIC_REPORT_URL=$(echo "$PUBLIC_REPORT" | grep -o 'https://[^[:space:]]*')" >> $GITHUB_ENV
                echo "‚úÖ Public report created"
              else
                echo "‚ö†Ô∏è No TestRail run ID available, skipping public report creation"
              fi
            env:
              TESTRAIL_HOST: ${{ secrets.TESTRAIL_HOST }}
              TESTRAIL_USER: ${{ secrets.TESTRAIL_USER }}
              TESTRAIL_API_KEY: ${{ secrets.TESTRAIL_API_KEY }}
              TESTRAIL_PROJECT_ID: ${{ secrets.TESTRAIL_PROJECT_ID }}
              TESTRAIL_SUITE_ID: ${{ secrets.TESTRAIL_SUITE_ID }}

          - name: Send Slack notification
            if: always()
            run: |
              echo "üì§ Sending Slack notification..."
              node scripts/slack-notification.js "Daily Regression Tests" "develop" "${{ github.run_id }}" "playwright-report/results.xml" "${{ env.TESTRAIL_RUN_ID }}" "${{ env.PUBLIC_REPORT_URL }}"
            env:
              SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
              GITHUB_SERVER_URL: ${{ github.server_url }}
              GITHUB_REPOSITORY: ${{ github.repository }}
              GITHUB_ACTOR: ${{ github.actor }}
              TESTRAIL_HOST: ${{ secrets.TESTRAIL_HOST }}
              TESTRAIL_PROJECT_NAME: ${{ secrets.TESTRAIL_PROJECT_NAME }}
